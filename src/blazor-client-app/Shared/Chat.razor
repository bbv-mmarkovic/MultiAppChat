@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;

<div class="container">
    <div>
        @_status
    </div>
    <div class="messaging">
        <div class="inbox_msg">
            <div class="mesgs">
                <div class="msg_history">
                    <div>
                        @foreach (var msg in _messages)
                        {
                            @if (@msg.IsReceived)
                            {
                                <div class="incoming_msg">
                                    <div class="incoming_msg_img"> </div>
                                    <div class="received_msg">
                                        <div class="received_withd_msg">
                                            <p>
                                                @msg.Message
                                            </p>
                                            <span class="time_date"> @msg.DateAsText </span>
                                        </div>
                                    </div>
                                </div>
                            }
                            else if (@msg.IsSent)
                            {
                                <div class="outgoing_msg">
                                    <div class="sent_msg">
                                        <p>
                                            @msg.Message
                                        </p>
                                        <span class="time_date"> @msg.DateAsText</span>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
                <div class="type_msg">
                    <div class="input_msg_write">
                        <input type="text" class="write_msg" placeholder="Type a message"
                               @bind="@_newMessage" @onkeydown="@(() => SendAsync(@_newMessage))" />
                        <button class="msg_send_btn" type="button" @onclick="@(() => SendAsync(@_newMessage))">
                            <i class="fa fa-paper-plane-o" aria-hidden="true"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code
{
    public const string HubUrl = "http://localhost:5000/MessageHub";
    public const string ReceivedType = "received";
    public const string SentType = "sent";

    // This code was created with the help of the microsoft MSDN documentation:
    // https://docs.microsoft.com/en-us/azure/azure-signalr/signalr-tutorial-build-blazor-server-chat-app

    private string _newMessage;
    private string _clientUniqueId = Guid.NewGuid().ToString();
    private string _status;

    private List<ChatMessage> _messages = new List<ChatMessage>();

    private string _hubUrl;

    private HubConnection _hubConnection;

    public class ChatMessage
    {
        public ChatMessage(string clientUniqueId, string message, string type)
        {
            this.ClientUniqueId = clientUniqueId;
            this.Message = message;
            this.Type = type;
            this.Date = DateTime.Now;
        }

        public string ClientUniqueId { get; set; }

        public string Message { get; set; }

        public DateTime Date { get; set; }

        public string Type { get; set; }

        public bool IsReceived => this.Type == ReceivedType;

        public bool IsSent => this.Type == SentType;

        public string DateAsText => this.Date.ToString("d");
    }

    protected override async Task OnInitializedAsync()
    {
        await this.StartChatAsync();
    }

    public async Task StartChatAsync()
    {
        try
        {
            _status = "Connecting...";

            await Task.Delay(3);

            _messages.Clear();

            // Create the chat client
            //string baseUrl = navigationManager.BaseUri;

            _hubUrl = HubUrl; // baseUrl.TrimEnd('/') + HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("MessageReceived", BroadcastMessage);

            await _hubConnection.StartAsync();

            _status = "Connected :)";
        }
        catch (Exception e)
        {
            _newMessage = $"ERROR: Failed to start chat client: {e.Message}";

            _status = e.ToString();
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_clientUniqueId, StringComparison.OrdinalIgnoreCase);
        string type = isMine ? SentType : ReceivedType;

        _messages.Add(new ChatMessage(name, message, type));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task SendAsync(string message)
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            var newMessage = new ChatMessage(_clientUniqueId, message, SentType);

            await _hubConnection.SendAsync("NewMessage", newMessage);

            _newMessage = string.Empty;
        }
    }

    private async Task DisconnectAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
        }
    }
}
